def print_board(board):
    """Prints the chessboard."""
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print("\n")


def is_safe(board, row, col, n):
    """Checks if a queen can be placed at board[row][col]."""
    # Check column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper-right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False

    return True


def solve_n_queens(board, row, n):
    """Backtracking function to place N queens."""
    if row == n:
        print_board(board)  # Print valid board arrangement
        return True

    found_solution = False
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1  # Place queen
            found_solution = solve_n_queens(
                board, row + 1, n) or found_solution
            board[row][col] = 0  # Backtrack

    return found_solution


def n_queens(n):
    """Initializes the board and starts solving."""
    board = [[0] * n for _ in range(n)]
    if not solve_n_queens(board, 0, n):
        print("No solution exists")


# Example Usage
n = 8  # Change N as needed
n_queens(n)
